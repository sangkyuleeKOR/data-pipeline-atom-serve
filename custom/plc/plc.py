import socket

plc_conn = None

class PLCConnector:

    @classmethod
    def get_or_create(cls, host, port):
        global plc_conn
        if plc_conn == None:
            plc_conn = cls.connect(host, port)
        return plc_conn

    @classmethod
    def connect(cls, host, port):
        conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        conn.connect((host, port))
        return conn

    @classmethod
    def close(cls, conn):
        conn.close()

    @classmethod
    def get_value(cls, conn, read_size=1, headdevice='D701'):
        ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x10\x00\x00\x00\x54\x00\x00\x00\x00\x00\x01\x00\x06\x00\x25\x4D\x58\x37\x30\x30'
        conn.send(ret_byte)
        _value = conn.recv(1024)
        value = _value[-1]
        return value

    @classmethod
    def check_value(cls, conn, check_val, headdevice='D700'):
        ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x10\x00\x00\x00\x54\x00\x00\x00\x00\x00\x01\x00\x06\x00\x25\x4D\x58\x37\x30\x30'
        while True:
            conn.send(ret_byte)
            _value = conn.recv(1024)
            value = _value[-1]
            if val == check_val:
                return True
        return False

    @classmethod
    def send_message(cls, conn, message, headdevice):
        if headdevice == "M750":
            if message == True:
                ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x13\x00\x00\x00\x58\x00\x00\x00\x00\x00\x01\x00\x06\x00\x25\x4D\x58\x37\x35\x30\x01\x00\x01'
            else:
                ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x13\x00\x00\x00\x58\x00\x00\x00\x00\x00\x01\x00\x06\x00\x25\x4D\x58\x37\x35\x30\x01\x00\x00'    
        elif headdevice == "M754":
            if message == True:
                ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x13\x00\x00\x00\x58\x00\x00\x00\x00\x00\x01\x00\x06\x00\x25\x4D\x58\x37\x35\x34\x01\x00\x01'
            else:
                ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x13\x00\x00\x00\x58\x00\x00\x00\x00\x00\x01\x00\x06\x00\x25\x4D\x58\x37\x35\x34\x01\x00\x00' 
        else:
            if message == True:
                ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x29\x00\x00\x00\x58\x00\x00\x00\x00\x00\x03\x00\x06\x00\x25\x4D\x58\x37\x35\x31\x06\x00\x25\x4D\x58\x37\x35\x32\x06\x00\x25\x4D\x58\x37\x35\x34\x01\x00\x01\x01\x00\x00\x01\x00\01'
            else:
                ret_byte = b'\x4C\x53\x49\x53\x2D\x58\x47\x54\x00\x00\x00\x00\x00\x33\x00\x00\x29\x00\x00\x00\x58\x00\x00\x00\x00\x00\x03\x00\x06\x00\x25\x4D\x58\x37\x35\x31\x06\x00\x25\x4D\x58\x37\x35\x32\x06\x00\x25\x4D\x58\x37\x35\x34\x01\x00\x00\x01\x00\x01\x01\x00\01'

        
        conn.send(ret_byte)

